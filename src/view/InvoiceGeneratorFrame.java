/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import controller.InvoiceListener;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.PrintWriter;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Collectors;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import controller.HeaderTableModel;
import model.InvoiceHeader;
import model.InvoiceLine;
import controller.ItemTableModel;

/**
 *
 * @author Eman
 */
public class InvoiceGeneratorFrame extends javax.swing.JFrame implements ActionListener, ListSelectionListener {

    /**
     * Creates new form InvoiceGeneratorFrame
     */
    public InvoiceGeneratorFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        invoicesTable = new javax.swing.JTable();
        deleteInvBtn = new javax.swing.JButton();
        deleteInvBtn.addActionListener(listener);
        createInvBtn = new javax.swing.JButton();
        createInvBtn.addActionListener(listener);
        jLabel5 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        itemsTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        invoiceNumLbl = new javax.swing.JLabel();
        invoiceTotalLbl = new javax.swing.JLabel();
        saveItemsBtn = new javax.swing.JButton();
        saveItemsBtn.addActionListener(listener);
        cancelItemsBtn = new javax.swing.JButton();
        cancelItemsBtn.addActionListener(listener);
        jLabel6 = new javax.swing.JLabel();
        InvoiceDateTxtbox = new javax.swing.JTextField();
        CustomerNameTxtbox = new javax.swing.JTextField();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        loadMenuItem = new javax.swing.JMenuItem();
        loadMenuItem.addActionListener(listener);
        saveMenuItem = new javax.swing.JMenuItem();
        saveMenuItem.addActionListener(listener);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        invoicesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "No.", "Date", "Customer", "Total"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        invoicesTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                invoicesTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(invoicesTable);

        deleteInvBtn.setText("Delete Invoice");
        deleteInvBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteInvBtnActionPerformed(evt);
            }
        });

        createInvBtn.setText("Create Invoice");
        createInvBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createInvBtnActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel5.setText("Invoices Table");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(75, Short.MAX_VALUE)
                .addComponent(createInvBtn)
                .addGap(60, 60, 60)
                .addComponent(deleteInvBtn)
                .addGap(87, 87, 87))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 437, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deleteInvBtn)
                    .addComponent(createInvBtn))
                .addContainerGap())
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        itemsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Item Name", "Item Price", "Count", "Item Total"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                true, true, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(itemsTable);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("Invoice Number :");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("Invoice Date :");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setText("Customer Name :");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel4.setText("Invoice Total :");

        invoiceNumLbl.setText(".");

        invoiceTotalLbl.setText(".");

        saveItemsBtn.setText("Save");

        cancelItemsBtn.setText("Cancel");
        cancelItemsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelItemsBtnActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel6.setText("Invoice Items ");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(185, Short.MAX_VALUE)
                .addComponent(saveItemsBtn)
                .addGap(71, 71, 71)
                .addComponent(cancelItemsBtn)
                .addGap(99, 99, 99))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel2))
                        .addGap(59, 59, 59)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(invoiceTotalLbl)
                            .addComponent(invoiceNumLbl)
                            .addComponent(InvoiceDateTxtbox, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(CustomerNameTxtbox, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jLabel6))
                .addContainerGap(95, Short.MAX_VALUE))
            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(invoiceNumLbl))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(InvoiceDateTxtbox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(CustomerNameTxtbox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(invoiceTotalLbl))
                .addGap(32, 32, 32)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(saveItemsBtn)
                    .addComponent(cancelItemsBtn))
                .addContainerGap())
        );

        fileMenu.setText("File");
        fileMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileMenuActionPerformed(evt);
            }
        });

        loadMenuItem.setText("Load File");
        loadMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(loadMenuItem);

        saveMenuItem.setText("Save File");
        fileMenu.add(saveMenuItem);

        jMenuBar1.add(fileMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void createInvBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createInvBtnActionPerformed
    }//GEN-LAST:event_createInvBtnActionPerformed

    private void deleteInvBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteInvBtnActionPerformed
    }//GEN-LAST:event_deleteInvBtnActionPerformed

    private void cancelItemsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelItemsBtnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cancelItemsBtnActionPerformed

    private void invoicesTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_invoicesTableMouseClicked
        /*
        int  index = invoicesTable.getSelectedRow();
        TableModel model = invoicesTable.getModel();
        String num = model.getValueAt(index,0).toString();
        String invDate = model.getValueAt(index,1).toString();
        String name = model.getValueAt(index,2).toString();
        String total = model.getValueAt(index,3).toString();
        
        invoiceNumLbl.setText(num);
        InvoiceDateTxtbox.setText(invDate);
        CustomerNameTxtbox.setText(name);
        invoiceTotalLbl.setText(total);
                */
    }//GEN-LAST:event_invoicesTableMouseClicked

    private void loadMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadMenuItemActionPerformed
    }//GEN-LAST:event_loadMenuItemActionPerformed

    private void fileMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileMenuActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fileMenuActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InvoiceGeneratorFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InvoiceGeneratorFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InvoiceGeneratorFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InvoiceGeneratorFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                InvoiceGeneratorFrame frame = new InvoiceGeneratorFrame();
                frame.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField CustomerNameTxtbox;
    private javax.swing.JTextField InvoiceDateTxtbox;
    private javax.swing.JButton cancelItemsBtn;
    private javax.swing.JButton createInvBtn;
    private javax.swing.JButton deleteInvBtn;
    private javax.swing.JMenu fileMenu;
    public javax.swing.JLabel invoiceNumLbl;
    private javax.swing.JLabel invoiceTotalLbl;
    private javax.swing.JTable invoicesTable;
    private javax.swing.JTable itemsTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JMenuItem loadMenuItem;
    private javax.swing.JButton saveItemsBtn;
    private javax.swing.JMenuItem saveMenuItem;
    // End of variables declaration//GEN-END:variables

    private InvoiceListener listener = new InvoiceListener(this) ;

    private ArrayList<InvoiceHeader> invoices;
    private ArrayList<InvoiceLine> invoiceLines;
    public static SimpleDateFormat sdf = new SimpleDateFormat("dd-mm-yyyy");
    private NewInv newInvDialog;
    private NewLine newInLineDialog;     
    private HeaderTableModel headerTableModel;
    private ItemTableModel itemTableModel;
 

    public ItemTableModel getItemTableModel() {
        return itemTableModel;
    }

    public void setItemTableModel(ItemTableModel itemTableModel) {
        this.itemTableModel = itemTableModel;
        getItemsTable().setModel(itemTableModel);
    }

    public HeaderTableModel getHeaderTableModel() {
        return headerTableModel;
    }

    public void setHeaderTableModel(HeaderTableModel headerTableModel) {
        this.headerTableModel = headerTableModel;
        getInvoicesTable().setModel(headerTableModel);
    }

    public JTextField getCustomerNameTxtbox() {
        return CustomerNameTxtbox;
    }

    public void setCustomerNameTxtbox(JTextField CustomerNameTxtbox) {
        this.CustomerNameTxtbox = CustomerNameTxtbox;
    }

    public JTextField getInvoiceDateTxtbox() {
        return InvoiceDateTxtbox;
    }

    public void setInvoiceDateTxtbox(JTextField InvoiceDateTxtbox) {
        this.InvoiceDateTxtbox = InvoiceDateTxtbox;
    }
    
    public JLabel getInvoiceNumLbl() {
        return invoiceNumLbl;
    }

    public JLabel getInvoiceToalLbl() {
        return invoiceTotalLbl;
    }

    public JTable getInvoicesTable() {
        return invoicesTable;
    }

    public JTable getItemsTable() {
        return itemsTable;
    }

    public ArrayList<InvoiceHeader> getInvoices() {
        if (invoices == null){
            invoices = new ArrayList<>();
        }
        return invoices;
    }
    
    public InvoiceHeader getInvoiceByNum(int num)
    {
        InvoiceHeader inv = null;
        for(InvoiceHeader header : getInvoices())
        {
            if(header.getNum() == num)
            {
                inv = header;
                break;
            }
        }
        return inv;
    }   

    @Override
    public void valueChanged(ListSelectionEvent e) {
        headerRowSelect();
    }
    
    private void headerRowSelect() {
        int indexrow = invoicesTable.getSelectedRow();
        if (indexrow >= 0) {
            InvoiceHeader rowselect = headerTableModel.getInvoices().get(indexrow);
            CustomerNameTxtbox.setText(rowselect.getName());
            InvoiceDateTxtbox.setText(rowselect.getDate().toString());
            invoiceNumLbl.setText("" + rowselect.getNum());
            invoiceTotalLbl.setText("" + rowselect.getInvTotal());
            ArrayList<InvoiceLine> lines = rowselect.getLines();
            itemTableModel = new ItemTableModel(lines);
            itemsTable.setModel(itemTableModel);
            itemTableModel.fireTableDataChanged();
        }
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        String actionCommand = e.getActionCommand();
        switch (actionCommand)
        {
            case "Load File":
                try {
            loadFile();
        } catch (Exception ex) {
            Logger.getLogger(InvoiceGeneratorFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
                break;
            case "Save File":
                try {
            saveFile();
        } catch (Exception ex) {
            Logger.getLogger(InvoiceGeneratorFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
                break;
            case "Create Invoice":
                createInvoice();
                break;
            case "Delete Invoice":
                deleteInvoice();
                break;
            case "Save":
                saveItem();
                break;
            case "Cancel":
                cancelItem();
                break;
        }
    }

    public void loadFile() throws Exception {
        invoices.clear();
        invoiceLines.clear();
        //"Chocese Frist File" Header
        JOptionPane.showMessageDialog(this, "Select Inoices header file", "Inv Header", JOptionPane.WARNING_MESSAGE);
        JFileChooser fc = new JFileChooser();
        int option = fc.showOpenDialog(this);
        File selectFile;
        if (option == JFileChooser.APPROVE_OPTION) {
            selectFile = fc.getSelectedFile();
            FileReader fr = new FileReader(selectFile);
            BufferedReader br = new BufferedReader(fr);
            String line = null;
            while ((line = br.readLine()) != null) {
                String[] headerLine = line.split(",");
                int invNum = Integer.parseInt(headerLine[0]);
                Date invdate = sdf.parse(headerLine[1]);
                String custName = headerLine[2];
                InvoiceHeader header = new InvoiceHeader(invNum,custName, invdate);
                invoices.add(header);
            }
            br.close();
            fr.close();

        }
         //"Chocese Second File" Lines
        JOptionPane.showMessageDialog(this, " Select Invoice Lines file", "Inv Lines", JOptionPane.WARNING_MESSAGE);
        option = fc.showOpenDialog(this);
        if (option == JFileChooser.APPROVE_OPTION) {
            selectFile = fc.getSelectedFile();
            FileReader fr = new FileReader(selectFile);
            BufferedReader br = new BufferedReader(fr);
            String line = null;
            while ((line = br.readLine()) != null) {
                String[] InvoiceLines = line.split(",");
                int invNum = Integer.parseInt(InvoiceLines[0]);
                String CustomerName = InvoiceLines[1];
                double price = Double.parseDouble(InvoiceLines[2]);
                int count = Integer.parseInt(InvoiceLines[3]);
                InvoiceHeader header = findByNumHeader(invNum);
                InvoiceLine Invline = new InvoiceLine(CustomerName, price, count, header);
                header.addLine(Invline);


            }
            br.close();
            fr.close();
            System.out.println("check line");
            headerTableModel = new HeaderTableModel(invoices);
            headerTableModel = new HeaderTableModel(invoices);
            invoicesTable.setModel(headerTableModel);
            invoicesTable.validate();
        }
           
    }
    
    private InvoiceHeader findByNumHeader(int headerNum) {

        for (InvoiceHeader header : invoices) {
            if (header.getNum() == headerNum) {
                return header;
            }
        }

        return null;
    }

    private void saveFile() throws FileNotFoundException {
        //Header Tabel
        JOptionPane.showMessageDialog(this, "Please Chosce File Header to Save", "Invooice Header", JOptionPane.WARNING_MESSAGE);
        JFileChooser fileChoosers = new JFileChooser();
        int option = fileChoosers.showOpenDialog(this);
        if (option == JFileChooser.APPROVE_OPTION) {
            File Csvfile = fileChoosers.getSelectedFile();
            PrintWriter out = new PrintWriter(Csvfile);

           for (InvoiceHeader header : invoices) {
               out.printf("%d,%s,%s",header.getNum(),header.getDate().toString(),header.getName());
               out.println();
            }
           out.close();
            JOptionPane.showMessageDialog(this, "Successfully Header Saved", "Information", JOptionPane.INFORMATION_MESSAGE);
        }
        //Lines Tabel
               JOptionPane.showMessageDialog(this, "Please Chosce File Line to Save", "Invooice Line", JOptionPane.WARNING_MESSAGE);
          fileChoosers = new JFileChooser();
         option = fileChoosers.showOpenDialog(this);
        if (option == JFileChooser.APPROVE_OPTION) {
            File Csvfilee = fileChoosers.getSelectedFile();
            PrintWriter outt = new PrintWriter(Csvfilee);


           for (InvoiceHeader header : invoices) {
               for(InvoiceLine Lines :header.getLines()){
               outt.printf("%s ,%s,%d",Lines.getName(),""+Lines.getPrice(),Lines.getCount());
               outt.println();
            }}
           outt.close();
            JOptionPane.showMessageDialog(this, "Successfully Lines Saved", "Information", JOptionPane.INFORMATION_MESSAGE);
        }

    }

    private void createInvoice() {  
        
        newInvDialog = new NewInv(this);
        newInvDialog.setVisible(true);
    }
    
    private void saveInvoice(){
        String customername = newInvDialog.getCustomerNameField().getText();
        String invdateString = newInvDialog.getInDateF().getText();
        Date invdate = new Date();
        try {
            Date inDate = sdf.parse(invdateString);
        } catch (ParseException ex) {
            //  Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        newInvDialog.setVisible(false);

        int newNumber = getMaxNumber();
        InvoiceHeader headerNew = new InvoiceHeader(newNumber,customername ,invdate);
        invoices.add(headerNew);
        headerTableModel.fireTableDataChanged();
    }
    
    private void cancelInvoice(){
        newInvDialog.setVisible(false);
    }
    
    private int getMaxNumber() {
        int num = 0;
        for (InvoiceHeader header : invoices) {
            if (header.getNum() > num) {
                num = header.getNum();
            }
        }
        return num + 1;
    }

    private void deleteInvoice() {
        int indexrow = invoicesTable.getSelectedRow();
        headerTableModel.removeRow(indexrow);
        headerTableModel.fireTableDataChanged();
        itemTableModel.fireTableDataChanged();
    }

    private void addItem() {
        newInLineDialog = new NewLine(this);
        newInLineDialog.setVisible(true);
    }

    private void cancelItem() {
        newInLineDialog.setVisible(false);

    }
    
    private void deleteItem() {
      int indexrow = itemsTable.getSelectedRow();
        itemTableModel.removeRow(indexrow);
        itemTableModel.fireTableDataChanged();
    }
    
    private void saveItem(){
         String itemNameS = newInLineDialog.getItemNameTF().getText();
        String itemCountS = newInLineDialog.getItemCountTF().getText();
        String itemPriceS = newInLineDialog.getItemPriceTF().getText();
        int itemCount = Integer.parseInt(itemCountS);
        double itemPrice = Double.parseDouble(itemPriceS);

        newInLineDialog.setVisible(false);

        int row = invoicesTable.getSelectedRow();
        if (row >= 0) {
            InvoiceHeader header = invoices.get(row);
            InvoiceLine li = new InvoiceLine(itemNameS, itemPrice, itemCount, header);
            header.addLine(li);

            itemTableModel.fireTableDataChanged();
            headerTableModel.fireTableDataChanged();
        }
    }
     
}
